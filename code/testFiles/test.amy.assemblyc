00 [15, 1, 0] jump main
01 [-1, 1, 1] stringToInt:
02 [35, 1, 2, 0, 0] stackget string 0
03 [35, 1, 3, 0, 1] stackget size 1
04 [0, 1, 4, 0, 0] assign val 0
05 [0, 1, 5, 0, 0] assign i 0
06 [-1, 6, 6] while01:
07 [28, 1, 5, 1, 3] cmp i size
08 [20, 1, 7] jge endwhile01
09 [5, 1, 4, 1, 4, 0, 10] multiply val val 10
10 [28, 2, 1, 2, 1, 5, 0, '1'] cmp string[i] '1'
11 [19, 1, 8] jneq notOne
12 [3, 1, 4, 1, 4, 0, 1] add val val 1
13 [15, 1, 9] jump continue
14 [-1, 8, 14] notOne:
15 [28, 2, 1, 2, 1, 5, 0, '2'] cmp string[i] '2'
16 [19, 1, 10] jneq notTwo
17 [3, 1, 4, 1, 4, 0, 2] add val val 2
18 [15, 1, 9] jump continue
19 [-1, 10, 19] notTwo:
20 [28, 2, 1, 2, 1, 5, 0, '3'] cmp string[i] '3'
21 [19, 1, 11] jneq notThree
22 [3, 1, 4, 1, 4, 0, 3] add val val 3
23 [15, 1, 9] jump continue
24 [-1, 11, 24] notThree:
25 [28, 2, 1, 2, 1, 5, 0, '4'] cmp string[i] '4'
26 [19, 1, 12] jneq notFour
27 [3, 1, 4, 1, 4, 0, 4] add val val 4
28 [15, 1, 9] jump continue
29 [-1, 12, 29] notFour:
30 [28, 2, 1, 2, 1, 5, 0, '5'] cmp string[i] '5'
31 [19, 1, 13] jneq notFive
32 [3, 1, 4, 1, 4, 0, 5] add val val 5
33 [15, 1, 9] jump continue
34 [-1, 13, 34] notFive:
35 [28, 2, 1, 2, 1, 5, 0, '6'] cmp string[i] '6'
36 [19, 1, 14] jneq notSix
37 [3, 1, 4, 1, 4, 0, 6] add val val 6
38 [15, 1, 9] jump continue
39 [-1, 14, 39] notSix:
40 [28, 2, 1, 2, 1, 5, 0, '7'] cmp string[i] '7'
41 [19, 1, 15] jneq notSeven
42 [3, 1, 4, 1, 4, 0, 7] add val val 7
43 [15, 1, 9] jump continue
44 [-1, 15, 44] notSeven:
45 [28, 2, 1, 2, 1, 5, 0, '8'] cmp string[i] '8'
46 [19, 1, 16] jneq notEight
47 [3, 1, 4, 1, 4, 0, 8] add val val 8
48 [15, 1, 9] jump continue
49 [-1, 16, 49] notEight:
50 [28, 2, 1, 2, 1, 5, 0, '9'] cmp string[i] '9'
51 [19, 1, 17] jneq notNine
52 [3, 1, 4, 1, 4, 0, 9] add val val 9
53 [15, 1, 9] jump continue
54 [-1, 17, 54] notNine:
55 [28, 2, 1, 2, 1, 5, 0, '0'] cmp string[i] '0'
56 [19, 1, 18] jneq error
57 [3, 1, 4, 1, 4, 0, 0] add val val 0
58 [15, 1, 9] jump continue
59 [-1, 18, 59] error:
60 [8, 0, 'e'] print 'e'
61 [8, 0, 'r'] print 'r'
62 [8, 0, 'r'] print 'r'
63 [8, 0, 'o'] print 'o'
64 [9, 0, 'r'] println 'r'
65 [9, 2, 1, 2, 1, 5] println string[i]
66 [11] halt
67 [-1, 9, 67] continue:
68 [3, 1, 5, 1, 5, 0, 1] add i i 1
69 [15, 1, 6] jump while01
70 [-1, 7, 70] endwhile01:
71 [13, 1, 4] return val
72 [-1, 19, 72] printRange:
73 [35, 1, 20, 0, 0] stackget N 0
74 [0, 1, 5, 0, 0] assign i 0
75 [-1, 21, 75] while02:
76 [28, 1, 5, 1, 20] cmp i N
77 [20, 1, 22] jge endwhile02
78 [9, 1, 5] println i
79 [3, 1, 5, 1, 5, 0, 1] add i i 1
80 [15, 1, 21] jump while02
81 [-1, 22, 81] endwhile02:
82 [13, 0, 0] return 0
83 [-1, 0, 83] main:
84 [10, 1, 2] input string
85 [32, 1, 3, 1, 2] sizeof size string
86 [33, 1, 3] push size
87 [33, 1, 2] push string
88 [12, 1, 1] call stringToInt
89 [14, 1, 4] response val
90 [9, 1, 4] println val
91 [33, 1, 4] push val
92 [12, 1, 19] call printRange
93 [11] halt
